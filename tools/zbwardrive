#!/usr/bin/env python

"""
Use any attached KillerBee-supported capture devices to preform a wardrive,
by using a single device to iterate through channels and send beacon requests
while other devices are assigned to capture all packets on a channel after
it is selected as 'of interest' which can change based on the -a flag.
"""

import argparse
from multiprocessing import Process, Manager
import logging

import killerbee.zbwardrive as wd

# Command line main function
if __name__=='__main__':
    # Command line parsing
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',
                        help='Produce more output, for debugging')
    #parser.add_argument('-d', '--db', dest='dblog', action='store_true',
    #                    help='Enable KillerBee\'s log-to-database functionality')
    #parser.add_argument('-a', '--agressive', dest='agressive', action='store_true',
    #                    help='Initiate capture on channels where packets were seen, even if no beacon response was received')
    parser.add_argument('-i', '--iface', '--dev', action='append', dest='include')
    #TODO make it be able to ignore a list!
    parser.add_argument('-o', '--out', action='store', dest='output', default='.',
                        help='Where to write any output files')
    parser.add_argument('-s', '--scanningtime', action='store', dest='scanning_time', default=5,
                        help='Amount of time to wait on a channel to see if it\'s used')
    parser.add_argument('-c', '--capturetime', action='store', dest='capture_time', default=3,
                        help='Amount of time to capture packets on a channel')
    parser.add_argument('-l', '--log', action='store', dest='logger', default=None,
                        help='File to save logging to. Defualt is none')
    args = parser.parse_args()

    # TODO: make logging and logging location a flag
    if args.logger:
        logging.basicConfig(format = '%(asctime)s %(levelname)s: %(message)s',
                            datefmt='%m/%d/%Y %I:%M:%S %p', 
                            filename=args.logger, level=logging.DEBUG)
    else:
        logger = logging.getLogger()
        logger.disabled = True

    # try-except block to catch keyboard interrupt.
    try:
        # Some shared state for multiprocessing use
        manager = Manager()
        devices = manager.dict()

        # TODO: check return value from startScan 
        wd.zbwardrive.startScan(
            verbose=args.verbose, ignore=args.ignore, 
            include=args.include, output=args.output,
            scanning_time=int(args.scanning_time), 
            capture_time=int(args.capture_time))

    except KeyboardInterrupt:
        if args.verbose:
            print 'Sutting down'
        logging.info('Shutting down')
